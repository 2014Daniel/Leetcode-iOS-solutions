class Solution {
    func letterCombinations(_ digits: String) -> [String] {
        var res = [String]()
        let chars = [Character](digits.characters)
        
        guard chars.count > 0 else {
            return res
        }
        
        dfs(&res, board, chars, "", 0)
        
        return res
    }
    
    let board = ["", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"]
    
    private func dfs(_ res: inout [String], _ board: [String], _ chars: [Character], _ temp: String, _ index: Int) {
        // termination case
        if index == chars.count {
            res.append(temp)
            return
        }
        
        var temp = temp
        let current = [Character](board[Int(String(chars[index]))!].characters)
        
        for i in 0..<current.count {
            temp += String(current[i])
            dfs(&res, board, chars, temp, index + 1)
            temp = String(temp.characters.dropLast())
        }
    }
}
