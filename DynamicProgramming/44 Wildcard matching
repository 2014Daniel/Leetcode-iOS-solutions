// use DP to solve this problem
// 1 state: isMatch[i][j] means if pattern[0...i - 1] matches source[0...j - 1], 
//          that is if the first i characters in pattern match the first j characters in source. 
// 
// 2 transfer function: consider isMatch[i][j]
//     a: if pattern[i-1] == pattern[j-1] || pattern[i-1] == "?"   isMatch[i][j] = isMatch[i-1][j-1]
//     b: else if pattern[i-1] == "*" isMatch[i][j] = isMatch[i-1][j] || isMatch[i][j-1]
//     HERE is the core of this problem. Check https://www.youtube.com/watch?v=9OnS06RYQiw&t=601s
//         I:  when we consider "*" as empty sequence, isMatch[i][j] = isMatch[i-1][j], 
//               like pattern is "abb*" and source is "abb"
//         II: when we consider "*" as a non-empty sequence, isMatch[i][j] = isMatch[i][j-1],
//           like pattern is "ab*" and source is "abdc"
//     c: else isMatch[i][j] = false, that is pattern[i-1] != source[j-1] and pattern[j-1] is not "*" or 
//       "?"
// 3 base condition:
//    isMatch[0][0] = true
//    isMatch[0][1...source.count] = false
//    isMatch[i][0] = isMatch[i-1][0] if pattern[i-1] = "*" else false
class Solution {
    func isMatch(_ s: String, _ p: String) -> Bool {
        // be careful: s is an empty string and p is an empty string
        if s == "" && p == "" {
            return true
        }
        let source = [Character](s)
        let pattern = [Character](p)
        
        var isMatch = Array(repeating:(Array(repeating: false, count: source.count + 1)), count: pattern.count + 1)
        isMatch[0][0] = true
        
        // we need to make sure pattern is not empty, because line 36 needs pattern length >= 1
        //when pattern is an empty string but source is not
        if pattern.count == 0 {
            return false
        } 
        for i in 1...pattern.count {
            if pattern[i - 1] == "*" {
                isMatch[i][0] = isMatch[i - 1][0]
            }
        }
        
        // we need to make sure source is not empty, because line 36 needs source length >= 1
        if source.count == 0 {
            return isMatch[pattern.count][0]
        }
        for i in 1...source.count {
            isMatch[0][i] = false
        }
        
        for p in 1...pattern.count {
            for s in 1...source.count {
                if source[s - 1] == pattern[p - 1] || pattern[p - 1] == "?" {
                    isMatch[p][s] = isMatch[p - 1][s - 1]
                } else if pattern[p - 1] == "*" {
                    isMatch[p][s] = isMatch[p - 1][s] || isMatch[p][s - 1]
                } else {
                    isMatch[p][s] = false
                }
              
            }
        }
        return isMatch[pattern.count][source.count]
        
    }
}

